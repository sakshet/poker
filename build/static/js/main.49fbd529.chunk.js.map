{"version":3,"sources":["components/action-bar/action-bar.tsx","components/header/header.tsx","components/table/table.tsx","containers/poker-activity-container.tsx","serviceWorker.ts","index.tsx"],"names":["ActionBar","showCheck","this","props","className","styles","disabled","React","Header","balance","clientName","Table","PokerActivityContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAGaA,EAAb,uKACwB,IACdC,EAAcC,KAAKC,MAAnBF,UACR,OACC,uBAAKG,UAAWC,aACf,uBAAKD,UAAWC,aACf,0BAAQC,UAAWL,GAAnB,UAKD,uBAAKG,UAAWC,aACf,uCAID,uBAAKD,UAAWC,aACf,6CAjBL,GAA+BE,aCAlBC,EAAb,uKACwB,IAAD,EACWN,KAAKC,MAA7BM,EADa,EACbA,QAASC,EADI,EACJA,WACjB,OACC,2BACC,sCACUD,EADV,aAC6BC,QANjC,GAA4BH,aCAfI,EAAb,uKAEQ,OACI,wCAHZ,GAA2BJ,aCCdK,EAAb,uKACwB,IAAD,EAKjBV,KAAKC,MAHRM,EAFoB,EAEpBA,QACAC,EAHoB,EAGpBA,WACAT,EAJoB,EAIpBA,UAED,OACC,2BACC,gBAAC,EAAD,CACCQ,QAASA,EACTC,WAAYA,IAEb,gBAAC,EAAD,MACA,gBAAC,EAAD,CACCT,UAAWA,SAfhB,GAA4CM,a,MCQxBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CACEX,QAAS,IACTC,WAAY,UACZT,WAAW,KAGfoB,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.49fbd529.chunk.js","sourcesContent":["import * as React from 'react';\nimport { IActionBarProps } from '../../shared';\nimport * as styles from './action-bar.css';\nexport class ActionBar extends React.Component<IActionBarProps> {\n\trender(): JSX.Element {\n\t\tconst { showCheck } = this.props;\n\t\treturn (\n\t\t\t<div className={styles.actionBar}>\n\t\t\t\t<div className={styles.checkFold}>\n\t\t\t\t\t<button disabled={!showCheck}>\n\t\t\t\t\t\tCheck\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className={styles.checkFold}>\n\t\t\t\t\t<button>\n\t\t\t\t\t\tFold\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className={styles.checkFold}>\n\t\t\t\t\t<button>\n\t\t\t\t\t\tRaise\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import * as React from 'react';\nimport { IHeaderProps } from '../../shared';\n\nexport class Header extends React.Component<IHeaderProps> {\n\trender(): JSX.Element {\n\t\tconst { balance, clientName } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\tBalance {balance} |  User: {clientName}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import * as React from 'react';\nimport { ITableProps } from '../../shared';\n\nexport class Table extends React.Component<ITableProps> {\n    render(): JSX.Element {\n        return (\n            <div>Table</div>\n        );\n    }\n}","import * as React from 'react';\nimport { ActionBar, Header, Table } from '../components';\nimport { IPokerActivityContainerProps } from '../shared';\n\nexport class PokerActivityContainer extends React.Component<IPokerActivityContainerProps> {\n\trender(): JSX.Element {\n\t\tconst { \n\t\t\tbalance,\n\t\t\tclientName,\n\t\t\tshowCheck\n\t\t} = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header\n\t\t\t\t\tbalance={balance}\n\t\t\t\t\tclientName={clientName}             \n\t\t\t\t/>\n\t\t\t\t<Table />\n\t\t\t\t<ActionBar\n\t\t\t\t\tshowCheck={showCheck}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PokerActivityContainer } from './containers';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PokerActivityContainer \n      balance={100}\n      clientName={\"Sakshet\"}\n      showCheck={false}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}